// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: post.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    post_image,
    title,
    post_category,
    content,
    time_for_read
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, post_image, title, post_category, content, time_for_read, created_at
`

type CreatePostParams struct {
	PostImage    int64  `json:"post_image"`
	Title        string `json:"title"`
	PostCategory int64  `json:"post_category"`
	Content      string `json:"content"`
	TimeForRead  int32  `json:"time_for_read"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.PostImage,
		arg.Title,
		arg.PostCategory,
		arg.Content,
		arg.TimeForRead,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostImage,
		&i.Title,
		&i.PostCategory,
		&i.Content,
		&i.TimeForRead,
		&i.CreatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, post_image, title, post_category, content, time_for_read, created_at FROM posts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.PostImage,
			&i.Title,
			&i.PostCategory,
			&i.Content,
			&i.TimeForRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
